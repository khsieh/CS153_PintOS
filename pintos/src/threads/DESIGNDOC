		+--------------------+
		|        CS 153      |
		| PROJECT 1: THREADS |
	      	|   DESIGN DOCUMENT  |
            	+--------------------+
											   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Dylan De Los Santos <ddelo004@ucr.edu> <861063270>
Kevin Hsieh <khsie003@ucr.edu> <861054367>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

   	 	     ALARM CLOCK
		     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.



---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

first ensures interrupt are enabled
disables the interrupt level
then saves the number of ticks to a member variable of the current thread called sleep_ticks
the thread is then blocked to sleep it and the interrupt level is restored to trigger the interrupt handler
the interrupt handler sees which threads need waking up and clocks down sleep_ticks to 0
this signals the thread is finished sleeping so it unblocks the thread

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

Keeping the ready list in sorted order. So that everytime the interrupt handler is called it doesn't have to iterate through the whole list. 

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

ready list sets priority for waiting every time block is called

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Interrupts are disable while timer_sleep reads through the sleep list. This prevents the interrupt handeler to be call, therefore preventing race condition to occur.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

   	   	   PRIORITY SCHEDULING
		   ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.



>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

When a high priority thread is inserted into the waiting list, the list will be updated with descending priorities. Whenever a priority donataion happens, the current list will be re-evaulated to re-order it in the proper way. 

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

A priority donation occurs when the current thread, thread A, that holds the lock is executing an important job, and a higher priority thread, thread B, calls lock_acquire() on the same lock object. When this scenario happens, we would want to continue the current thread, A, and let it finish its job. However, for this to happen, thread A needs to have a higher or equivlent priority as thread B. We then donates a portion of thread B's priority to thread A so that it can continue to finish its current job.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

As the lock_release() is called, it will iterate over the wait list of the specific lock. Each iteration will also execute recall_donation, which revoke the priority donation of each thread on the waiting list. 

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

   	   	    ADVANCED SCHEDULER
		     (If Attempted)
		     ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

   	    	   SURVEY QUESTIONS
		   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?n